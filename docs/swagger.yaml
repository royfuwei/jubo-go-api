basePath: /
definitions:
  domain.App:
    properties:
      app:
        type: string
    type: object
  domain.OrderDTO:
    properties:
      id:
        type: string
      message:
        type: string
    type: object
  domain.ReqAddOne:
    properties:
      name:
        type: string
    type: object
  domain.ReqOrderData:
    properties:
      message:
        type: string
    type: object
  domain.RespFindAll:
    properties:
      items:
        items:
          $ref: '#/definitions/domain.RespPatientData'
        type: array
      total:
        type: integer
    type: object
  domain.RespOrders:
    properties:
      items:
        items:
          $ref: '#/definitions/domain.OrderDTO'
        type: array
      total:
        type: integer
    type: object
  domain.RespPatientData:
    properties:
      id:
        type: string
      name:
        type: string
      orderIds:
        items:
          type: string
        type: array
      orders:
        items:
          $ref: '#/definitions/domain.OrderDTO'
        type: array
    type: object
  domain.ResponseError:
    properties:
      errorCode:
        description: 自定義錯誤代碼
        type: string
      message:
        description: 錯誤訊息
        type: string
      path:
        description: API路徑
        type: string
      status:
        description: 錯誤狀態碼
        type: integer
    type: object
info:
  contact: {}
  description: Golang Clean Arch for Gin
  title: jubo-go-api
  version: "1.0"
paths:
  /:
    get:
      description: 取得App 名稱
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.App'
      summary: 取得App 名稱
      tags:
      - app
  /orders/{id}:
    patch:
      description: Update Order By Id
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: update message
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/domain.ReqOrderData'
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/domain.OrderDTO'
        "400":
          description: 請求的body、header驗證失敗
          schema:
            $ref: '#/definitions/domain.ResponseError'
      summary: Update Order By Id
      tags:
      - order
  /orders/patients/{patientId}:
    get:
      description: Find Orders By patientId
      parameters:
      - description: Patient ID
        in: path
        name: patientId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/domain.RespOrders'
        "400":
          description: 請求的body、header驗證失敗
          schema:
            $ref: '#/definitions/domain.ResponseError'
      summary: Find Orders By patientId
      tags:
      - order
  /patients:
    get:
      description: Find All patients
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/domain.RespFindAll'
        "400":
          description: 請求的body、header驗證失敗
          schema:
            $ref: '#/definitions/domain.ResponseError'
      summary: Find All patients
      tags:
      - patients
    post:
      description: Create Patient
      parameters:
      - description: Create Patient request body
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/domain.ReqAddOne'
      produces:
      - application/json
      responses:
        "201":
          description: success response
          schema:
            $ref: '#/definitions/domain.RespPatientData'
        "400":
          description: 請求的body、header驗證失敗
          schema:
            $ref: '#/definitions/domain.ResponseError'
      summary: Create Patient
      tags:
      - patients
  /patients/{id}:
    get:
      description: Find patient by Id
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success response
          schema:
            $ref: '#/definitions/domain.RespPatientData'
        "400":
          description: 請求的body、header驗證失敗
          schema:
            $ref: '#/definitions/domain.ResponseError'
      summary: Find patient by Id
      tags:
      - patients
  /patients/{id}/order:
    post:
      description: Create Order By patientId
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: string
      - description: Create Patient's Order request body
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/domain.ReqOrderData'
      produces:
      - application/json
      responses:
        "201":
          description: success response
          schema:
            $ref: '#/definitions/domain.RespPatientData'
        "400":
          description: 請求的body、header驗證失敗
          schema:
            $ref: '#/definitions/domain.ResponseError'
      summary: Create Order By patientId
      tags:
      - patients
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
